name: Build Flutter apps

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter packages get

      - name: Analyze
        run: flutter analyze lib test

      - name: Run tests
        run: flutter test --no-pub --coverage

      - name: Build Android App
        if: startsWith(github.ref, 'refs/tags/v')
        run: flutter build apk --release

      - name: Build iOS App
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      - name: Build web
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          flutter build web --release
          cd build/web
          zip -r web-app.zip .

      - name: Archive Production Artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@master
        with:
          name: web
          path: build/web

      - name: Release Apps
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.TOKEN }}
          artifacts: 'build/app/outputs/**/*.apk,build/ios/iphoneos/app.ipa,build/web/web-app.zip'

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: web
          path: build/web

      - name: Deploy to Firebase hosting
        uses: w9jds/firebase-action@master
        with:
          args: deploy --message \"${{ github.event.head_commit.message }}\" --only hosting:ci-cd-872000
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}





#name: Flutter CI + CD
#
## This workflow is triggered on pushes to the repository.
#on:
#  # push:
#  #   branches: [ main ] # This will trigger the workflow on every push to the main branch
#  # pull_request:
#  #   branches: [ main ] # Add this trigger to run this workflow on PR's to the main branch
#  workflow_dispatch: # to manually run this workflow
#
#env:
#  FLUTTER_CHANNEL: 'stable' # 'stable', 'beta', or 'master', default to: 'stable'
#  FLUTTER_VERSION: '3.0.0'
#  XCODE_VERSION: '13.3.1'
#  PATH_TO_AAB: 'build/app/outputs/bundle/release/app-release.aab'
#  ANDROID_PACKAGE_NAME: 'com.daniilshumko.woeios'
#
#jobs:
#  code-analysis-and-testing:
#    name: Code analysis and testing
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: ${{ env.FLUTTER_CHANNEL }}
#          # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
#
#      - name: Get pub dependencies
#        run: flutter pub get
#
#      - name: Flutter analyze
#        run: flutter analyze
#
#      - name: Flutter test
#        run: flutter test
#
#
#  android:
#    name: Android CI/CD
#    needs: code-analysis-and-testing
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Prepare key.jks & key.properties files
#        env:
#          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
#          KEY_PROPERTIES_FILE: ${{ secrets.KEY_PROPERTIES_FILE }}
#        run: |
#          echo "Convert key base64 string to a file"
#          echo "$KEYSTORE_FILE" >> key.jks.base64
#          base64 --decode key.jks.base64 > key.jks
#          echo "Convert key.properties secret string to a file"
#          echo "$KEY_PROPERTIES_FILE" >> key.properties
#        working-directory: 'android/'
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: ${{ env.FLUTTER_CHANNEL }}
#          # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
#
#      - name: Flutter doctor
#        run: flutter doctor
#
#      - name: Build AAB
#        run: flutter build appbundle --release
#
#      - name: Upload AAB artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: release-aab
#          path: ${{ env.PATH_TO_AAB }}
#
#      - name: Upload to Play Store
#        run: |
#          fastlane supply --aab ${{ env.PATH_TO_AAB }} --json_key_data '${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}' --package_name '${{ env.ANDROID_PACKAGE_NAME }}' --track 'internal'
#  ios:
#    name: iOS CI/CD
#    needs: code-analysis-and-testing
#    runs-on: macos-12
#    timeout-minutes: 30
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - uses: maxim-lobanov/setup-xcode@v1
#        with:
#          xcode-version: ${{ env.XCODE_VERSION }}
#
#      - name: Prepare signing
#        env:
#          FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
#          FS_P12_FILE: ${{ secrets.FS_P12_FILE }}
#          FS_P12_PASS: ${{ secrets.FS_P12_PASS }}
#          FS_PROV_FILE: ${{ secrets.FS_PROV_FILE }}
#        run: |
#          echo "Convert base64 strings to files"
#          echo "$FS_PROV_FILE" >> prov.temp.txt
#          echo "$FS_P12_FILE ">> cert.temp.txt
#          base64 --decode prov.temp.txt > prov.temp.mobileprovision
#          base64 --decode cert.temp.txt > cert.temp.p12
#          echo "Copy provisioning file to the correct locations"
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
#          echo "Create a new keychain & import p12 certificate"
#          security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
#          security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
#          echo "Set new keychain as a default"
#          security list-keychains -s ~/Library/Keychains/build.keychain
#          security default-keychain -s ~/Library/Keychains/build.keychain
#          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
#          security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
#          echo "Clean up temp files"
#          rm *.temp.*
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: ${{ env.FLUTTER_CHANNEL }}
#          # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
#
#      - name: Flutter doctor
#        run: flutter doctor
#
#      - name: Build IPA
#        env:
#          FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
#        run: |
#          echo "Unlocking keychain"
#          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
#          # Important, just in case the build takes longer than the default 300s timeout
#          # Otherwise the build will freeze at signing the frameworks if the keychain is locked
#          echo "Increasing keychain auto lock timeout"
#          security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
#          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
#          echo "Locking keychain"
#          security lock-keychain ~/Library/Keychains/build.keychain
#      - name: Upload IPA artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: release-ipa
#          path: ./build/ios/ipa/flutter_github_actions_basics.ipa
#
#      - name: Publishing app to TestFlight
#        env:
#          FS_APPLE_ID_USERNAME: ${{ secrets.FS_APPLE_ID_USERNAME }}
#          FS_APPLE_ID_APP_SPECIFIC_PASS: ${{ secrets.FS_APPLE_ID_APP_SPECIFIC_PASS }}
#          FS_IPA_PATH: ./build/ios/ipa/flutter_github_actions_basics.ipa
#        run: |
#          xcrun altool --upload-app -t ios -f "$FS_IPA_PATH" -u "$FS_APPLE_ID_USERNAME" -p "$FS_APPLE_ID_APP_SPECIFIC_PASS"
#  web:
#    name: Web CI/CD
#    needs: code-analysis-and-testing
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: ${{ env.FLUTTER_CHANNEL }}
#          # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
#
#      - name: Flutter doctor
#        run: flutter doctor
#
#      - name: Build web
#        run: flutter build web --release
#
#      - name: Upload web artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: release-web
#          path: build/web/